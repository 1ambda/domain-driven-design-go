// Code generated by go-swagger; DO NOT EDIT.

package swagmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pagination pagination
// swagger:model pagination
type Pagination struct {

	// current page offset
	// Required: true
	CurrentPageOffset *int32 `json:"currentPageOffset"`

	// item count per page
	// Required: true
	ItemCountPerPage *int32 `json:"itemCountPerPage"`

	// total item count
	// Required: true
	TotalItemCount *int64 `json:"totalItemCount"`
}

// Validate validates this pagination
func (m *Pagination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentPageOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemCountPerPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalItemCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pagination) validateCurrentPageOffset(formats strfmt.Registry) error {

	if err := validate.Required("currentPageOffset", "body", m.CurrentPageOffset); err != nil {
		return err
	}

	return nil
}

func (m *Pagination) validateItemCountPerPage(formats strfmt.Registry) error {

	if err := validate.Required("itemCountPerPage", "body", m.ItemCountPerPage); err != nil {
		return err
	}

	return nil
}

func (m *Pagination) validateTotalItemCount(formats strfmt.Registry) error {

	if err := validate.Required("totalItemCount", "body", m.TotalItemCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pagination) UnmarshalBinary(b []byte) error {
	var res Pagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
