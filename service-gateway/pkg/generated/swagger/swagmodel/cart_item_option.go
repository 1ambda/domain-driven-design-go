// Code generated by go-swagger; DO NOT EDIT.

package swagmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CartItemOption cart item option
// swagger:model cartItemOption
type CartItemOption struct {

	// cart item ID
	// Required: true
	CartItemID *int64 `json:"cartItemID"`

	// cart item option ID
	// Required: true
	CartItemOptionID *int64 `json:"cartItemOptionID"`

	// product option price
	ProductOptionPrice string `json:"productOptionPrice,omitempty"`

	// quantity
	// Required: true
	Quantity *int64 `json:"quantity"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`
}

// Validate validates this cart item option
func (m *CartItemOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCartItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCartItemOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartItemOption) validateCartItemID(formats strfmt.Registry) error {

	if err := validate.Required("cartItemID", "body", m.CartItemID); err != nil {
		return err
	}

	return nil
}

func (m *CartItemOption) validateCartItemOptionID(formats strfmt.Registry) error {

	if err := validate.Required("cartItemOptionID", "body", m.CartItemOptionID); err != nil {
		return err
	}

	return nil
}

func (m *CartItemOption) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *CartItemOption) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartItemOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartItemOption) UnmarshalBinary(b []byte) error {
	var res CartItemOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
