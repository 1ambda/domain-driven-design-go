// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddCartItemHandlerFunc turns a function with the right signature into a add cart item handler
type AddCartItemHandlerFunc func(AddCartItemParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddCartItemHandlerFunc) Handle(params AddCartItemParams) middleware.Responder {
	return fn(params)
}

// AddCartItemHandler interface for that can handle valid add cart item params
type AddCartItemHandler interface {
	Handle(AddCartItemParams) middleware.Responder
}

// NewAddCartItem creates a new http.Handler for the add cart item operation
func NewAddCartItem(ctx *middleware.Context, handler AddCartItemHandler) *AddCartItem {
	return &AddCartItem{Context: ctx, Handler: handler}
}

/*AddCartItem swagger:route POST /cart cart addCartItem

AddCartItem add cart item API

*/
type AddCartItem struct {
	Context *middleware.Context
	Handler AddCartItemHandler
}

func (o *AddCartItem) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddCartItemParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
