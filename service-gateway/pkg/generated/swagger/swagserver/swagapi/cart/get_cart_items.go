// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	swagmodel "github.com/1ambda/domain-driven-design-go/service-gateway/pkg/generated/swagger/swagmodel"
)

// GetCartItemsHandlerFunc turns a function with the right signature into a get cart items handler
type GetCartItemsHandlerFunc func(GetCartItemsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCartItemsHandlerFunc) Handle(params GetCartItemsParams) middleware.Responder {
	return fn(params)
}

// GetCartItemsHandler interface for that can handle valid get cart items params
type GetCartItemsHandler interface {
	Handle(GetCartItemsParams) middleware.Responder
}

// NewGetCartItems creates a new http.Handler for the get cart items operation
func NewGetCartItems(ctx *middleware.Context, handler GetCartItemsHandler) *GetCartItems {
	return &GetCartItems{Context: ctx, Handler: handler}
}

/*GetCartItems swagger:route GET /cart cart getCartItems

GetCartItems get cart items API

*/
type GetCartItems struct {
	Context *middleware.Context
	Handler GetCartItemsHandler
}

func (o *GetCartItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCartItemsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCartItemsOKBody get cart items o k body
// swagger:model GetCartItemsOKBody
type GetCartItemsOKBody struct {

	// cart
	Cart *swagmodel.Cart `json:"cart,omitempty"`

	// cart item list
	CartItemList []*swagmodel.CartItem `json:"cartItemList"`
}

// Validate validates this get cart items o k body
func (o *GetCartItemsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCartItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCartItemsOKBody) validateCart(formats strfmt.Registry) error {

	if swag.IsZero(o.Cart) { // not required
		return nil
	}

	if o.Cart != nil {
		if err := o.Cart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCartItemsOK" + "." + "cart")
			}
			return err
		}
	}

	return nil
}

func (o *GetCartItemsOKBody) validateCartItemList(formats strfmt.Registry) error {

	if swag.IsZero(o.CartItemList) { // not required
		return nil
	}

	for i := 0; i < len(o.CartItemList); i++ {
		if swag.IsZero(o.CartItemList[i]) { // not required
			continue
		}

		if o.CartItemList[i] != nil {
			if err := o.CartItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCartItemsOK" + "." + "cartItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCartItemsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCartItemsOKBody) UnmarshalBinary(b []byte) error {
	var res GetCartItemsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
