// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserCartHandlerFunc turns a function with the right signature into a get user cart handler
type GetUserCartHandlerFunc func(GetUserCartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserCartHandlerFunc) Handle(params GetUserCartParams) middleware.Responder {
	return fn(params)
}

// GetUserCartHandler interface for that can handle valid get user cart params
type GetUserCartHandler interface {
	Handle(GetUserCartParams) middleware.Responder
}

// NewGetUserCart creates a new http.Handler for the get user cart operation
func NewGetUserCart(ctx *middleware.Context, handler GetUserCartHandler) *GetUserCart {
	return &GetUserCart{Context: ctx, Handler: handler}
}

/*GetUserCart swagger:route GET /cart cart getUserCart

GetUserCart get user cart API

*/
type GetUserCart struct {
	Context *middleware.Context
	Handler GetUserCartHandler
}

func (o *GetUserCart) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserCartParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
