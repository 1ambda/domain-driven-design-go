// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/order/order_repository.go

// Package order is a generated GoMock package.
package order

import (
	exception "github.com/1ambda/domain-driven-design-go/service-gateway/internal/exception"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddOrder mocks base method
func (m *MockRepository) AddOrder(order *Order) (*Order, exception.Exception) {
	ret := m.ctrl.Call(m, "AddOrder", order)
	ret0, _ := ret[0].(*Order)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder
func (mr *MockRepositoryMockRecorder) AddOrder(order interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockRepository)(nil).AddOrder), order)
}

// FindOrderById mocks base method
func (m *MockRepository) FindOrderById(id uint) (*Order, exception.Exception) {
	ret := m.ctrl.Call(m, "FindOrderById", id)
	ret0, _ := ret[0].(*Order)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// FindOrderById indicates an expected call of FindOrderById
func (mr *MockRepositoryMockRecorder) FindOrderById(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderById", reflect.TypeOf((*MockRepository)(nil).FindOrderById), id)
}

// AddOrderDetail mocks base method
func (m *MockRepository) AddOrderDetail(order *OrderDetail) (*OrderDetail, exception.Exception) {
	ret := m.ctrl.Call(m, "AddOrderDetail", order)
	ret0, _ := ret[0].(*OrderDetail)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// AddOrderDetail indicates an expected call of AddOrderDetail
func (mr *MockRepositoryMockRecorder) AddOrderDetail(order interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderDetail", reflect.TypeOf((*MockRepository)(nil).AddOrderDetail), order)
}

// FindOrderDetailById mocks base method
func (m *MockRepository) FindOrderDetailById(id uint) (*OrderDetail, exception.Exception) {
	ret := m.ctrl.Call(m, "FindOrderDetailById", id)
	ret0, _ := ret[0].(*OrderDetail)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// FindOrderDetailById indicates an expected call of FindOrderDetailById
func (mr *MockRepositoryMockRecorder) FindOrderDetailById(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderDetailById", reflect.TypeOf((*MockRepository)(nil).FindOrderDetailById), id)
}
