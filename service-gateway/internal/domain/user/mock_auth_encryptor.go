// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/auth_encryptor.go

// Package user is a generated GoMock package.
package user

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEncryptor is a mock of Encryptor interface
type MockEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorMockRecorder
}

// MockEncryptorMockRecorder is the mock recorder for MockEncryptor
type MockEncryptorMockRecorder struct {
	mock *MockEncryptor
}

// NewMockEncryptor creates a new mock instance
func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {
	mock := &MockEncryptor{ctrl: ctrl}
	mock.recorder = &MockEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {
	return m.recorder
}

// Digest mocks base method
func (m *MockEncryptor) Digest(password string) (string, error) {
	ret := m.ctrl.Call(m, "Digest", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Digest indicates an expected call of Digest
func (mr *MockEncryptorMockRecorder) Digest(password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Digest", reflect.TypeOf((*MockEncryptor)(nil).Digest), password)
}

// Compare mocks base method
func (m *MockEncryptor) Compare(hashedPassword, password string) error {
	ret := m.ctrl.Call(m, "Compare", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare
func (mr *MockEncryptorMockRecorder) Compare(hashedPassword, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockEncryptor)(nil).Compare), hashedPassword, password)
}
