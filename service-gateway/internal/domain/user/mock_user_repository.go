// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/user_repository.go

// Package user is a generated GoMock package.
package user

import (
	exception "github.com/1ambda/domain-driven-design-go/service-gateway/internal/exception"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method
func (m *MockRepository) DeleteUser(id uint) (bool, exception.Exception) {
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockRepositoryMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), id)
}

// FindUserById mocks base method
func (m *MockRepository) FindUserById(id uint) (*User, exception.Exception) {
	ret := m.ctrl.Call(m, "FindUserById", id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById
func (mr *MockRepositoryMockRecorder) FindUserById(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockRepository)(nil).FindUserById), id)
}

// FineAllUsers mocks base method
func (m *MockRepository) FineAllUsers() (*[]User, exception.Exception) {
	ret := m.ctrl.Call(m, "FineAllUsers")
	ret0, _ := ret[0].(*[]User)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// FineAllUsers indicates an expected call of FineAllUsers
func (mr *MockRepositoryMockRecorder) FineAllUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FineAllUsers", reflect.TypeOf((*MockRepository)(nil).FineAllUsers))
}

// CreateAuthIdentity mocks base method
func (m *MockRepository) CreateAuthIdentity(uid, email, password string) (*AuthIdentity, exception.Exception) {
	ret := m.ctrl.Call(m, "CreateAuthIdentity", uid, email, password)
	ret0, _ := ret[0].(*AuthIdentity)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// CreateAuthIdentity indicates an expected call of CreateAuthIdentity
func (mr *MockRepositoryMockRecorder) CreateAuthIdentity(uid, email, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthIdentity", reflect.TypeOf((*MockRepository)(nil).CreateAuthIdentity), uid, email, password)
}

// FindAuthIdentityByUID mocks base method
func (m *MockRepository) FindAuthIdentityByUID(uid string) (*AuthIdentity, exception.Exception) {
	ret := m.ctrl.Call(m, "FindAuthIdentityByUID", uid)
	ret0, _ := ret[0].(*AuthIdentity)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// FindAuthIdentityByUID indicates an expected call of FindAuthIdentityByUID
func (mr *MockRepositoryMockRecorder) FindAuthIdentityByUID(uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuthIdentityByUID", reflect.TypeOf((*MockRepository)(nil).FindAuthIdentityByUID), uid)
}
