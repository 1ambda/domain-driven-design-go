// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/product/product_handler.go

// Package product is a generated GoMock package.
package product

import (
	exception "github.com/1ambda/domain-driven-design-go/service-gateway/internal/exception"
	swagapi "github.com/1ambda/domain-driven-design-go/service-gateway/pkg/generated/swagger/swagserver/swagapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProductHandler is a mock of ProductHandler interface
type MockProductHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProductHandlerMockRecorder
}

// MockProductHandlerMockRecorder is the mock recorder for MockProductHandler
type MockProductHandlerMockRecorder struct {
	mock *MockProductHandler
}

// NewMockProductHandler creates a new mock instance
func NewMockProductHandler(ctrl *gomock.Controller) *MockProductHandler {
	mock := &MockProductHandler{ctrl: ctrl}
	mock.recorder = &MockProductHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductHandler) EXPECT() *MockProductHandlerMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockProductHandler) Configure(handlerRegistry *swagapi.GatewayAPI) {
	m.ctrl.Call(m, "Configure", handlerRegistry)
}

// Configure indicates an expected call of Configure
func (mr *MockProductHandlerMockRecorder) Configure(handlerRegistry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockProductHandler)(nil).Configure), handlerRegistry)
}

// FindAllProducts mocks base method
func (m *MockProductHandler) FindAllProducts(itemCountPerPage, currentPageOffset int) (int, []*Product, exception.Exception) {
	ret := m.ctrl.Call(m, "FindAllProducts", itemCountPerPage, currentPageOffset)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*Product)
	ret2, _ := ret[2].(exception.Exception)
	return ret0, ret1, ret2
}

// FindAllProducts indicates an expected call of FindAllProducts
func (mr *MockProductHandlerMockRecorder) FindAllProducts(itemCountPerPage, currentPageOffset interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockProductHandler)(nil).FindAllProducts), itemCountPerPage, currentPageOffset)
}
